capture_type = "regex"

[[def]]
kTable = '''
    [ [0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4]
    , [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 4]
    , [0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4]
    , [0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 4, 4, 5]
    , [0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5]
    , [0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 5, 5]
    , [0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 5]
    , [0, 0, 0, 0, 1, 1, 2, 3, 4, 4, 5, 5, 6]
    , [0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6]
    , [0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 5, 6, 7]

    , [0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7]
    , [0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 6, 6, 7]
    , [0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7]
    , [0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7]
    , [0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8]
    , [0, 0, 0, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8]
    , [0, 0, 0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8]
    , [0, 0, 0, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8]
    , [0, 0, 0, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8]
    , [0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9]

    , [0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    , [0, 0, 0, 1, 2, 3, 4, 6, 6, 7, 8, 9, 10]
    , [0, 0, 0, 1, 2, 3, 5, 6, 6, 7, 8, 9, 10]
    , [0, 0, 0, 2, 2, 3, 5, 6, 6, 7, 8, 9, 10]
    , [0, 0, 0, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]
    , [0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]
    , [0, 0, 0, 2, 3, 4, 5, 6, 8, 8, 9, 9, 10]
    , [0, 0, 0, 2, 3, 4, 6, 6, 8, 8, 9, 9, 10]
    , [0, 0, 0, 2, 3, 4, 6, 6, 8, 9, 9, 10, 10]
    , [0, 0, 0, 2, 3, 4, 6, 7, 8, 9, 9, 10, 10]

    , [0, 0, 0, 2, 4, 4, 6, 7, 8, 9, 10, 10, 10]
    , [0, 0, 0, 2, 4, 5, 6, 7, 8, 9, 10, 10, 11]
    , [0, 0, 0, 3, 4, 5, 6, 7, 8, 10, 10, 10, 11]
    , [0, 0, 0, 3, 4, 5, 6, 8, 8, 10, 10, 10, 11]
    , [0, 0, 0, 3, 4, 5, 6, 8, 9, 10, 10, 11, 11]
    , [0, 0, 0, 3, 4, 5, 7, 8, 9, 10, 10, 11, 12]
    , [0, 0, 0, 3, 5, 5, 7, 8, 9, 10, 11, 11, 12]
    , [0, 0, 0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 12]
    , [0, 0, 0, 3, 5, 6, 7, 8, 10, 10, 11, 12, 13]
    , [0, 0, 0, 4, 5, 6, 7, 8, 10, 11, 11, 12, 13]

    , [0, 0, 0, 4, 5, 6, 7, 9, 10, 11, 11, 12, 13]
    , [0, 0, 0, 4, 6, 6, 7, 9, 10, 11, 12, 12, 13]
    , [0, 0, 0, 4, 6, 7, 7, 9, 10, 11, 12, 13, 13]
    , [0, 0, 0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    , [0, 0, 0, 4, 6, 7, 8, 10, 10, 11, 12, 13, 14]
    , [0, 0, 0, 4, 6, 7, 9, 10, 10, 11, 12, 13, 14]
    , [0, 0, 0, 4, 6, 7, 9, 10, 10, 12, 13, 13, 14]
    , [0, 0, 0, 4, 6, 7, 9, 10, 11, 12, 13, 13, 15]
    , [0, 0, 0, 4, 6, 7, 9, 10, 12, 12, 13, 13, 15]
    , [0, 0, 0, 4, 6, 7, 10, 10, 12, 12, 13, 14, 15]

    , [0, 0, 0, 4, 6, 8, 10, 10, 12, 12, 13, 15, 15]
    , [0, 0, 0, 5, 7, 8, 10, 10, 12, 12, 13, 15, 15]
    , [0, 0, 0, 5, 7, 8, 10, 11, 12, 12, 13, 15, 15]
    , [0, 0, 0, 5, 7, 9, 10, 11, 12, 12, 14, 15, 15]
    , [0, 0, 0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16]
    , [0, 0, 0, 5, 7, 10, 10, 11, 12, 13, 14, 16, 16]
    , [0, 0, 0, 5, 8, 10, 10, 11, 12, 13, 15, 16, 16]
    , [0, 0, 0, 5, 8, 10, 11, 11, 12, 13, 15, 16, 17]
    , [0, 0, 0, 5, 8, 10, 11, 12, 12, 13, 15, 16, 17]
    , [0, 0, 0, 5, 9, 10, 11, 12, 12, 14, 15, 16, 17]

    , [0, 0, 0, 5, 9, 10, 11, 12, 13, 14, 15, 16, 18]
    , [0, 0, 0, 5, 9, 10, 11, 12, 13, 14, 16, 17, 18]
    , [0, 0, 0, 5, 9, 10, 11, 13, 13, 14, 16, 17, 18]
    , [0, 0, 0, 5, 9, 10, 11, 13, 13, 15, 17, 17, 18]
    , [0, 0, 0, 5, 9, 10, 11, 13, 14, 15, 17, 17, 18]
    , [0, 0, 0, 5, 9, 10, 12, 13, 14, 15, 17, 18, 18]
    , [0, 0, 0, 5, 9, 10, 12, 13, 15, 15, 17, 18, 19]
    , [0, 0, 0, 5, 9, 10, 12, 13, 15, 16, 17, 19, 19]
    , [0, 0, 0, 5, 9, 10, 12, 14, 15, 16, 17, 19, 19]
    , [0, 0, 0, 5, 9, 10, 12, 14, 16, 16, 17, 19, 19]

    , [0, 0, 0, 5, 9, 10, 12, 14, 16, 17, 18, 19, 19]
    , [0, 0, 0, 5, 9, 10, 13, 14, 16, 17, 18, 19, 20]
    , [0, 0, 0, 5, 9, 10, 13, 15, 16, 17, 18, 19, 20]
    , [0, 0, 0, 5, 9, 10, 13, 15, 16, 17, 19, 20, 21]
    , [0, 0, 0, 6, 9, 10, 13, 15, 16, 18, 19, 20, 21]
    , [0, 0, 0, 6, 9, 10, 13, 16, 16, 18, 19, 20, 21]
    , [0, 0, 0, 6, 9, 10, 13, 16, 17, 18, 19, 20, 21]
    , [0, 0, 0, 6, 9, 10, 13, 16, 17, 18, 20, 21, 22]
    , [0, 0, 0, 6, 9, 10, 13, 16, 17, 19, 20, 22, 23]
    , [0, 0, 0, 6, 9, 10, 13, 16, 18, 19, 20, 22, 23]

    , [0, 0, 0, 6, 9, 10, 13, 16, 18, 20, 21, 22, 23]
    , [0, 0, 0, 6, 9, 10, 13, 17, 18, 20, 21, 22, 23]
    , [0, 0, 0, 6, 9, 10, 14, 17, 18, 20, 21, 22, 24]
    , [0, 0, 0, 6, 9, 11, 14, 17, 18, 20, 21, 23, 24]
    , [0, 0, 0, 6, 9, 11, 14, 17, 19, 20, 21, 23, 24]
    , [0, 0, 0, 6, 9, 11, 14, 17, 19, 21, 22, 23, 24]
    , [0, 0, 0, 7, 10, 11, 14, 17, 19, 21, 22, 23, 25]
    , [0, 0, 0, 7, 10, 12, 14, 17, 19, 21, 22, 24, 25]
    , [0, 0, 0, 7, 10, 12, 14, 18, 19, 21, 22, 24, 25]
    , [0, 0, 0, 7, 10, 12, 15, 18, 19, 21, 22, 24, 26]

    , [0, 0, 0, 7, 10, 12, 15, 18, 19, 21, 23, 25, 26]
    , [0, 0, 0, 7, 11, 13, 15, 18, 19, 21, 23, 25, 26]
    , [0, 0, 0, 7, 11, 13, 15, 18, 20, 21, 23, 25, 27]
    , [0, 0, 0, 8, 11, 13, 15, 18, 20, 22, 23, 25, 27]
    , [0, 0, 0, 8, 11, 13, 16, 18, 20, 22, 23, 25, 28]
    , [0, 0, 0, 8, 11, 14, 16, 18, 20, 22, 23, 26, 28]
    , [0, 0, 0, 8, 11, 14, 16, 19, 20, 22, 23, 26, 28]
    , [0, 0, 0, 8, 12, 14, 16, 19, 20, 22, 24, 26, 28]
    , [0, 0, 0, 8, 12, 15, 16, 19, 20, 22, 24, 27, 28]
    , [0, 0, 0, 8, 12, 15, 17, 19, 20, 22, 24, 27, 29]

    , [0, 0, 0, 8, 12, 15, 18, 19, 20, 22, 24, 27, 30]
    ]
'''

grTable = '["器用度", "俊敏度", "筋力", "生命力", "知力", "精神力"]'

[[def]]
sw = '''
\c.\u.\a.(
    dice := \x.(roll := 2b6 |> log |> sum; if roll > x then roll else 0);
    if c > 2 then (
        roll := dice.2 |> \x. min.[x, 1] * (x + a + u);
        if roll >= c then (
            [roll] + ((dice.2 |> \x. min.[x, 1] * (x + a)) @ c)
        ) else (
            [roll]
        )
    ) else ( 
        [0]
    )
)
'''

[[def]]
k = '''
\d.\c.\u.\a.\du.(
    roll := sw.c.u.a;
    rot := len.roll - 1;
    if rot > 1 then str.rot + "回転" |> log else 0;
    count := ([]#>roll).(\p.\c.p+[len.p]);
    if (roll.0 == 0) then (
        "自動失敗"
    ) else (
        roll := pack.[count, roll];
        roll.(\r.kTable.(min.[d+du*r.0, 100]).(r.1)) |> sum
    )
)
'''
gr = '\n.n.((2b6).(\r.grTable.(r-1)))'

[[pattern]]
capture = '^[kK](?P<d>\d+)(?P<x>.*)@(?P<c>\d+)(\$(?P<u>[+-]?\d+)|#(?P<a>[+-]?\d+)|r(?P<du>[+-]?\d+))*$'
replace = '(k.($d).($c).($u+0).($a+0).($du+0))$x'

[[pattern]]
capture = 'k(?P<d>\d+)\[(?P<c>\d+)\]'
replace = '(k.($d).($c))'

[[pattern]]
capture = '(gr|Gr|gR|GR)'
replace = '(gr.1)'
